#!/usr/bin/env python2
# vim:fileencoding=utf-8
from __future__ import unicode_literals, division, absolute_import, print_function
from calibre.web.feeds.news import BasicNewsRecipe

class AdvancedUserRecipe20200101194101(BasicNewsRecipe):
    __author__ = 'Rainer Brudna'
    title = u'Ebook News'
    cover_url = 'file:///target/recipes/cover3.png'

    oldest_article = 8
    auto_cleanup = True
    language = 'de'
    no_stylesheets = True
    max_articles_per_feed = 100
    use_embeded_content = False

    feeds = [
       #(u'Good-Ereader Blog', 'https://goodereader.com/blog/feed?format=xml'),
       (u'Good-Ereader Readers', 'https://goodereader.com/blog/category/electronic-readers'),
       (u'The Ebook-Ereader', 'https://blog.the-ebook-reader.com/feed'),
       (u'Google News - Science Fiction', 'https://news.google.com/rss/search?q=science+fiction&hl=en-US&gl=US&ceid=US%3Aen'),
       (u'Science Fiction - Reddit', 'https://www.reddit.com/r/sciencefiction/.rss?format=xml'),
       (u'KotoBee Blog', 'https://www.kotobee.com/blog/feed'),
       (u'The Digital Reader news', 'https://the-digital-reader.com/category/e-reading-tech/hardware-news/feed'),
       (u'e-reader tech gadgets', 'https://teleread.org/category/e-reading-tech-gadgets-apps/feed'),
       (u'Sci-Fi Bloggers', 'https://www.scifibloggers.com/feed'),
       (u'The Magazine of Fantasy & Science Fiction', 'https://www.sfsite.com/fsf/blog/feed'),
       (u'Schriftsonar', 'http://www.schriftsonar.de/category/podcast/feed/'),
       (u'Deutsche Science Fiction', 'https://deutsche-science-fiction.de/?feed=rss2'),
       #(u'BÃ¼cher Blog', 'http://feeds.feedburner.com/Bluecher'),
       # search in google for feedspot something
       #(u'Active Reader Club', 'https://activereader.club/blog/feed'),
    ]

    #remove_tags = [
    #                dict(name='div', attrs={'class': 'news_logo'}),
    #                dict(name='div', attrs={'class': 'news_foren'}),
    #                dict(name='p', attrs={'class': 'news_navi'}),
    #              ]

    #remove_tags_after = dict(name = 'div', attrs = {'class' : 'story' })

